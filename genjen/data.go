package main

var keywords = []string{
	"private",
	"module",
	"class",
	"extends",
	"or",
	"and",
	"in",
	"this",
	"not",
	"implies",
	"where",
	"select",
	"instanceof",
	"override",
	"predicate",
	"abstract",
	"result",
}

var identifiers = []string{
	"boolean",
	"true",
	"false",
	"float",
	"int",
	"string",
	"date",
}

var groups = []struct {
	name        string   // name of the function / method
	comment     string   // comment appended to name
	variadic    bool     // is the parameter variadic?
	opening     string   // opening token
	closing     string   // closing token
	separator   string   // separator token
	multi       bool     // items are always on multiple lines
	parameters  []string // parameter names
	preventFunc bool     // prevent the fooFunc function/method
}{
	{
		name:       "Parens",
		comment:    "renders a single item in parenthesis. Use for type conversion or to specify evaluation order.",
		variadic:   true,
		opening:    "(",
		closing:    ")",
		separator:  "",
		multi:      true,
		parameters: []string{"item"},
	},
	{
		name:       "List",
		comment:    "renders a comma separated list. Use for multiple return functions.",
		variadic:   true,
		opening:    "",
		closing:    "",
		separator:  ",",
		parameters: []string{"items"},
	},
	{
		name:       "Index",
		comment:    "renders a colon separated list enclosed by square brackets. Use for array / slice indexes and definitions.",
		variadic:   true,
		opening:    "[",
		closing:    "]",
		separator:  ":",
		parameters: []string{"items"},
	},
	{
		name:       "Block",
		comment:    "renders a statement list enclosed by curly braces. Use for code blocks. A special case applies when used directly after Case or Default, where the braces are omitted. This allows use in switch and select statements.",
		variadic:   true,
		opening:    "{",
		closing:    "}",
		multi:      true,
		parameters: []string{"statements"},
	},
	{
		name:       "Defs",
		comment:    "renders a statement list enclosed in parenthesis. Use for definition lists.",
		variadic:   true,
		opening:    "(",
		closing:    ")",
		multi:      true,
		parameters: []string{"definitions"},
	},
	{
		name:       "Call",
		comment:    "renders a comma separated list enclosed by parenthesis. Use for function calls.",
		variadic:   true,
		opening:    "(",
		closing:    ")",
		separator:  ",",
		parameters: []string{"params"},
	},
	{
		name:       "Params",
		comment:    "renders a comma separated list enclosed by parenthesis. Use for function parameters and method receivers.",
		variadic:   true,
		opening:    "(",
		closing:    ")",
		separator:  ",",
		parameters: []string{"params"},
	},
	{
		name:       "Assert",
		comment:    "renders a period followed by a single item enclosed by parenthesis. Use for type assertions.",
		variadic:   false,
		opening:    ".(",
		closing:    ")",
		separator:  "",
		parameters: []string{"typ"},
	},
	{
		name:       "If",
		comment:    "renders the keyword followed by a semicolon separated list.",
		variadic:   true,
		opening:    "if ",
		closing:    "",
		separator:  ";",
		parameters: []string{"conditions"},
	},
	{
		name:       "For",
		comment:    "renders the keyword followed by a semicolon separated list.",
		variadic:   true,
		opening:    "for ",
		closing:    "",
		separator:  ";",
		parameters: []string{"conditions"},
	},
	{
		name:       "Set",
		comment:    "renders a set literal expression, i.e. a comma separated list enclosed by square brackets.",
		variadic:   true,
		opening:    "[",
		closing:    "]",
		separator:  ",",
		parameters: []string{"items"},
	},
	{
		name:       "Any",
		comment:    "renders an any expression.",
		variadic:   false,
		opening:    "any(",
		closing:    ")",
		separator:  " | ",
		multi:      true,
		parameters: []string{"vars", "formula", "expression"},
	},
	{
		name:       "Exists",
		comment:    "renders the exists quantifier.",
		variadic:   false,
		opening:    "exists(",
		closing:    ")",
		separator:  " | ",
		multi:      true,
		parameters: []string{"vars", "formula1", "formula2"},
	},
	{
		name:       "ForAll",
		comment:    "renders the forall quantifier.",
		variadic:   false,
		opening:    "forall(",
		closing:    ")",
		separator:  " | ",
		multi:      true,
		parameters: []string{"vars", "formula1", "formula2"},
	},
	{
		name:       "ForEx",
		comment:    "renders the forex quantifier.",
		variadic:   false,
		opening:    "forex(",
		closing:    ")",
		separator:  " | ",
		multi:      true,
		parameters: []string{"vars", "formula1", "formula2"},
	},
	{
		name:       "From",
		comment:    "renders the from quantifier.",
		variadic:   true,
		opening:    "from ",
		closing:    "",
		separator:  ", ",
		parameters: []string{"vars"},
	},
}
